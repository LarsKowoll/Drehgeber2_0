/**
  ******************************************************************************
  * @file    	rotarySIM.ini
  * @author  	Nils Schoenherr
  * @version  V1.0
  * @date     25.10.2016
  * @brief    Simulation of Rotary-Encoder on PortE.Pin0 and .Pin1
  ******************************************************************************
  */

DEFINE int rotarySpeed						//current Speed in deg/sec
DEFINE int continueRotarySpeed		//speedBefore Pause (-1 equals 'not paused')
DEFINE int step;									//current position in stateList (getRotaryState())
DEFINE unsigned char numSteps			//number of different States in Graycode
DEFINE unsigned int  stepsPerRev	//how many steps per Revolution
DEFINE unsigned char pinMask			//PinMask for the two Phases
DEFINE long stepsToGo							//Number of steps which arent processed yet

//INIT VARIABLES
	rotarySpeed					=	10;		//inital speed
	continueRotarySpeed	=	-1;		//not paused
	numSteps 						= 4;		//2-Bit-GrayCode = 4Steps
	stepsPerRev 				= 1200;	//equals number of steps of Encoder used in HAW
	pinMask 						= 0x3;	//PE0 and PE1
	stepsToGo						=	0;		//Encoder is not rotating at begin
	step								=	0;		//starting in position 0

// transition list
// used switch instead of array
FUNC unsigned char getRotaryState(int position){
	switch(position){
		case 0: return 0x3;		// A=1 B=1
		case 1: return 0x1;		// A=1 B=0
		case 2: return 0x0;		// A=0 B=0
		case 3: return 0x2;		// A=0 B=1
	}
}

FUNC void pauseContinue(){
	if(continueRotarySpeed==-1){
		continueRotarySpeed=rotarySpeed;
		rotarySpeed=0;
		printf("Rotation PAUSED!\n");
	} else {
		rotarySpeed=continueRotarySpeed;
		continueRotarySpeed=-1;
		printf("Rotation CONTINUED!\n");
	}
}

/**
* goes one Step into specified direction instantly
**/
FUNC void goStep(int direction){
	if(direction>0){
		step++;
		if(step>=numSteps) step=0;
		PORTE = ((PORTE & ~pinMask )| getRotaryState(step));
	} else if(direction<0) {
		step--;
		if(step<0) step = numSteps-1;
		PORTE = ((PORTE & ~pinMask )| getRotaryState(step));
	}
}

/**
 *	rotary_encode - signalfunction for a rotary Encoder on PE0 and PE1
 **/
SIGNAL void rotary_encoder(void)  {
	while(1){
		if(rotarySpeed>0 && stepsToGo>0){
			stepsToGo--;
			goStep(1);
			swatch((360.0/stepsPerRev)/rotarySpeed);
		} else if(rotarySpeed>0 && stepsToGo<0){
			stepsToGo++;
			goStep(-1);
			swatch((360.0/stepsPerRev)/rotarySpeed);
		} else { 	//stepsToGo==0
			swatch(0.03);
		}
	}
}

/**
*		changeSpeed for all movements
*		if increment is zero, then the function asks with a prompt for an absolute value.
**/
FUNC void changeRotarySpeed(int increment){
	int tmpRotSpeed;
	if(continueRotarySpeed==-1){
		tmpRotSpeed = rotarySpeed;
	} else {
		tmpRotSpeed = continueRotarySpeed;
	}
	if(increment==0){
		tmpRotSpeed = getint("Please enter desired speed in deg/sec (integer):");
	} else {
		tmpRotSpeed += increment;
	}

	// constrain speed to positive values
	if(tmpRotSpeed<=0){
		tmpRotSpeed = 1;
	}
	if(continueRotarySpeed == -1){
		rotarySpeed = tmpRotSpeed;
		printf("Speed: %3d deg/sec\n", rotarySpeed);
	} else {
		continueRotarySpeed = tmpRotSpeed;
		printf("Roation will be continued with Speed: %3d deg/sec\n", continueRotarySpeed);
	}
}

/**
 *	rotary_encode - signalfunction for a rotary Encoder on PE0 and PE1
 *  if parameter steps is set to 0 then the function asks by prompt for an angle
 **/
FUNC void rotate_step(long steps)  {
	if(steps==0){
		steps = getlong("Please enter how many deg (integer):") * stepsPerRev / 360;
	}

	stepsToGo += steps;
}

// start signal function
rotary_encoder();

DEFINE BUTTON "Speed >>", "changeRotarySpeed(10);";
DEFINE BUTTON "Speed  >", "changeRotarySpeed(1);";
DEFINE BUTTON "Speed < ", "changeRotarySpeed(-1);";
DEFINE BUTTON "Speed <<", "changeRotarySpeed(-10)";
DEFINE BUTTON "Set Speed", "changeRotarySpeed(0)";
DEFINE BUTTON "1 Step >", "goStep(1)";
DEFINE BUTTON "1 Step <", "goStep(-1)";
DEFINE BUTTON "Rotate by Angle", "rotate_step(0)";
DEFINE BUTTON "Pause/Continue", "pauseContinue()";
