/**
  ******************************************************************************
  * @file    	gpioHelperForOneWire.ini
  * @author  	Nils Schoenherr
  * @version  V1.0
  * @date     16.01.2017
  * @brief    For change between input and output
  ******************************************************************************
  */



DEFINE int SENSORS_HOLD_LOW;
	SENSORS_HOLD_LOW=0;

FUNC int updateBus(){
	int ODR;
  int CRL;
	ODR = _RWORD(IOADR+(0x04*3));
	CRL = GPIOG_CRL;
	//printf("UPDATEBUS: odr=%d crl=%x ==> ", ODR&1, CRL&0xf);
	if(
		!SENSORS_HOLD_LOW && (
			((CRL&0xf) == 0x4) ||	//floating input
			(ODR&0x1==1 && ((CRL&0xf) == 0x3 || (CRL&0xf) == 0x7)) //output open drain or pushpull and odr is set
		)
	){
		PORTG |= 1;
		//printf("1\n");
		return 1;
	} else {
		PORTG &= ~1;
		//printf("0\n");
		return 0;
	}
}

INCLUDE "TI_BRD_LIB/Simulation/oneWireSTIM.ini"

FUNC void wakeOneWire(){
	if(updateBus()){
		oneWire(1);
	} else {
		oneWire(0);
	}
}


/************************************
WORKAROUND for compatibility to F4
*************************************/

FUNC void cr_helper(){
	unsigned int tmp;
	unsigned int moder, otyper;
  unsigned int outL;
  unsigned int outH;
  int i;


	moder = _RWORD(IOADR+(0x04*6));
	otyper = _RBYTE(IOADR+(0x04*6+3));
	outL = 0;
	outH = 0;
	for(i=0; i<8; i++){
		//go through all pins an get config
		switch(moder&0x3){
			case 0:  //input
				outL &= ~((0xf)<<(4*i));
				outL |= ((0x4)<<(4*i));
			break;
			case 1:  //output
				outL &= ~((0xf)<<(4*i));
				outL |= ((0x3)<<(4*i));
				//check push pull
				if(otyper&(1<<i)){
					outL |= ((0x4)<<(4*i));
				}
			break;
			case 2: //alternate function
				outL &= ~((0xf)<<(4*i));
				outL |= ((0xb)<<(4*i));
				//check push pull
				if(otyper&(1<<i)){
					outL |= ((0x4)<<(4*i));
				}
			break;
			case 3: //analog mode
				outL &= ~((0xf)<<(4*i));
			break;
		}
		moder = moder >> 2;
	}
	_WDWORD(IOADR,     outL);

	//wake all listeners
	wakeOneWire();
}

SIGNAL void moder_watcher(void){
	while(1){
		wwatch(IOADR+(0x04*6));
		cr_helper();
	}
}

SIGNAL void otyper_watcher(void){
	while(1){
		wwatch(IOADR+(0x04*6+3));
		cr_helper();
	}
}

SIGNAL void odr_watcher(void){
	while(1){
		wwatch(&GPIOG_ODR);
		wakeOneWire();
	}
}
SIGNAL void idr_watcher(void){
	while(1){
		rwatch(&GPIOG_IDR);
		updateBus();
	}
}

idr_watcher();
odr_watcher();

moder_watcher();

otyper_watcher();
