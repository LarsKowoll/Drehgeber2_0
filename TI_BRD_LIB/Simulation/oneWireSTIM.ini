
DEFINE int STEP_DEBUGGING
DEFINE long MHZ_PER_ns
	STEP_DEBUGGING=1;
	MHZ_PER_ns = 72;

DEFINE int lastIOstate;
lastIOstate=1;



/*****************************************
ONE WIRE FUNCTIONS
*****************************************/
DEFINE unsigned int ONEWIRE_ADR
	ONEWIRE_ADR = 0x91000000;
MAP ONEWIRE_ADR,ONEWIRE_ADR+0x00000100 READ WRITE;

DEFINE unsigned int SENSOR_SPACE
	SENSOR_SPACE = 0x20;

//*********** SENSORDATA *****************
/* possible IDs *************
0x28, 0xa0, 0x90, 0xe6, 0x01, 0x00, 0x00, 0x1e
0x28, 0xf2, 0x73, 0xe6, 0x01, 0x00, 0x00, 0xca
0x28, 0x3e, 0x88, 0xe6, 0x01, 0x00, 0x00, 0xfe
0x28, 0x61, 0x82, 0xe6, 0x01, 0x00, 0x00, 0x49

0x28, 0x84, 0x1e, 0xd0, 0x01, 0x00, 0x00, 0x5c
0x28, 0xe6, 0x68, 0xe6, 0x01, 0x00, 0x00, 0x41
0x28, 0x41, 0x8c, 0xe6, 0x01, 0x00, 0x00, 0x5d
0x28, 0xA7, 0x6d, 0xe6, 0x01, 0x00, 0x00, 0xd1

0x28, 0x98, 0x7e, 0xe6, 0x01, 0x00, 0x00, 0x2a
0x28, 0xd8, 0x6d, 0xe6, 0x01, 0x00, 0x00, 0x6d
0x28, 0x75, 0x8b, 0xe6, 0x01, 0x00, 0x00, 0x3d
0x28, 0x7d, 0x6d, 0xe6, 0x01, 0x00, 0x00, 0xda
**************************/
FUNC void assignTemp (int sensorid, int scr1, int scr2, char crc){
	short tempFixComma;
	_WDWORD(ONEWIRE_ADR + SENSOR_SPACE * sensorid + 8, scr1);
	_WDWORD(ONEWIRE_ADR + SENSOR_SPACE * sensorid + 12, scr2);
	_WBYTE(ONEWIRE_ADR + SENSOR_SPACE * sensorid + 16, crc);
	tempFixComma = scr1&0xffff;
	printf("Sensor %d (%08x%08x) measured: %f\n",
		sensorid,
		_RWORD(ONEWIRE_ADR + SENSOR_SPACE*sensorid+4),
		_RWORD(ONEWIRE_ADR + SENSOR_SPACE*sensorid),
		(float)(tempFixComma) / 16.0f);
}
DEFINE int measureCyclePositions;
FUNC void assignMeasurement(int sensorid, int measurementid){
	int measureCyclePos;
	if(sensorid>=0 && sensorid<4){
		measureCyclePos = (measureCyclePositions>>(8*sensorid) ) & 0xff;
		switch(sensorid){
			case 0:
				switch(measureCyclePos){
					case 0: assignTemp(sensorid, 0x464b0140, 0x1004ff7f, 0xca); //20.000000
					break;
					case 1: assignTemp(sensorid, 0x464b0000, 0x1004ff7f, 0xbe); //0.000000
					break;
					case 2: assignTemp(sensorid, 0x464bff60, 0x1004ff7f, 0x59); //-10.000000
					break;
					default:
					printf("error in measure cycle\n");
					break;
				}
				measureCyclePos = (measureCyclePos+1)%3;
				break;
			case 1:
				switch(measureCyclePos){
					case 0: assignTemp(sensorid, 0x464b01e8, 0x1004ff7f, 0xda); //30.5000
					break;
					case 1: assignTemp(sensorid, 0x464b00a4, 0x1004ff7f, 0x91); //10.2500
					break;
					case 2: assignTemp(sensorid, 0x464bfebe, 0x1004ff7f, 0x52); //-20.1250
					break;
					case 3: assignTemp(sensorid, 0x464b01e1, 0x1004ff7f, 0xb3); //30.0625
					break;
					case 4: assignTemp(sensorid, 0x464bfcd4, 0x1004ff7f, 0x65); //-50.7500
					break;
					case 5: assignTemp(sensorid, 0x464b028e, 0x1004ff7f, 0xef); //40.8750
					break;
					case 6: assignTemp(sensorid, 0x464b000f, 0x1004ff7f, 0x44); //0.9375
					break;
					default:
					printf("error in measure cycle\n");
					break;
				}
				measureCyclePos = (measureCyclePos+1)%7;
			break;
			case 2:
				assignTemp(sensorid, 0x464bf9c0, 0x1004ff7f, 0xed); //-100.000000
				printf("%30s sensor out of range!!!\n"," ");
			break;
			case 3:
				assignTemp(sensorid, 0x464b0140, 0x1004ff7f, 0xff); //20.000000 but wrong crc
				printf("%30s wrong crc!!!\n", " ");
			break;
			default:
			//sensor not known
			printf("sensor not known\n");
			break;
		}
		//clear counter for sensorid
		measureCyclePositions &= ~(0x000000ff<<(8*sensorid));
		//set next counter for sensorid
		measureCyclePositions |= (measureCyclePos<<(8*sensorid));
	}
}
/* possible Scratchpads

0x50, 0x05, 0x00, 0x00, 0x00, 0xff, 0xff, 0x10, 0x1a		//85° no measurement yet
0x6c, 0x01, 0x4b, 0x46, 0x7f, 0xff, 0x04, 0x10, 0x5d		//22.750°
0x6d, 0x01, 0x4b, 0x46, 0x7f, 0xff, 0x03, 0x10, 0x70		//22.8125°
0x6e, 0x01, 0x4b, 0x46, 0x7f, 0xff, 0x02, 0x10, 0x71		//22.8750°
0x6f, 0x01, 0x4b, 0x46, 0x7f, 0xff, 0x01, 0x10, 0x67		//22.9375°
0x70, 0x01, 0x4b, 0x46, 0x7f, 0xff, 0x10, 0x10, 0xe1		//23.000°
0x71, 0x01, 0x4b, 0x46, 0x7f, 0xff, 0x0f, 0x10, 0x56		//23.0625°
**************************/
//SENSOR 0
E CHAR (ONEWIRE_ADR + SENSOR_SPACE*0) = 0x28, 0xa0, 0x90, 0xe6, 0x01, 0x00, 0x00, 0x1e	//ROM
E CHAR (ONEWIRE_ADR + SENSOR_SPACE*0 + 8) = 0x50, 0x05, 0x00, 0x00, 0x00, 0xff, 0xff, 0x10, 0x1a	//SCRATCHPAD 85° no measurement yet
//E CHAR (ONEWIRE_ADR + SENSOR_SPACE*0 + 8) = 0x70, 0x01, 0x4b, 0x46, 0x7f, 0xff, 0x10, 0x10, 0xe1	//SCRATCHPAD

//SENSOR 1
E CHAR (ONEWIRE_ADR + SENSOR_SPACE*1) = 0x28, 0xf2, 0x73, 0xe6, 0x01, 0x00, 0x00, 0xca	//ROM
E CHAR (ONEWIRE_ADR + SENSOR_SPACE*1 + 8) = 0x50, 0x05, 0x00, 0x00, 0x00, 0xff, 0xff, 0x10, 0x1a	//SCRATCHPAD 85° no measurement yet
//E CHAR (ONEWIRE_ADR+SENSOR_SPACE*1+8) = 0x6f, 0x01, 0x4b, 0x46, 0x7f, 0xff, 0x01, 0x10, 0x67	//SCRATCHPAD

//SENSOR 2
E CHAR (ONEWIRE_ADR + SENSOR_SPACE*2) = 0x28, 0x3e, 0x88, 0xe6, 0x01, 0x00, 0x00, 0xfe	//ROM
E CHAR (ONEWIRE_ADR + SENSOR_SPACE*2 + 8) = 0x50, 0x05, 0x00, 0x00, 0x00, 0xff, 0xff, 0x10, 0x1a	//SCRATCHPAD 85° no measurement yet
//E CHAR (ONEWIRE_ADR + SENSOR_SPACE*2 + 8) = 0x6f, 0x01, 0x4b, 0x46, 0x7f, 0xff, 0x01, 0x10, 0x67	//SCRATCHPAD

//SENSOR 3
E CHAR (ONEWIRE_ADR + SENSOR_SPACE*3) = 0x28, 0x61, 0x82, 0xe6, 0x01, 0x00, 0x00, 0x49	//ROM
E CHAR (ONEWIRE_ADR + SENSOR_SPACE*3 + 8) = 0x50, 0x05, 0x00, 0x00, 0x00, 0xff, 0xff, 0x10, 0x1a	//SCRATCHPAD 85° no measurement yet
//E CHAR (ONEWIRE_ADR + SENSOR_SPACE*3 + 8) = 0x6f, 0x01, 0x4b, 0x46, 0x7f, 0xff, 0x01, 0x10, 0x67	//SCRATCHPAD

//SENSOR 4
E CHAR (ONEWIRE_ADR + SENSOR_SPACE*4) = 0x28, 0x84, 0x1e, 0xd0, 0x01, 0x00, 0x00, 0x5c	//ROM
E CHAR (ONEWIRE_ADR + SENSOR_SPACE*4 + 8) = 0x50, 0x05, 0x00, 0x00, 0x00, 0xff, 0xff, 0x10, 0x1a	//SCRATCHPAD 85° no measurement yet
//E CHAR (ONEWIRE_ADR + SENSOR_SPACE*4 + 8) = 0x6f, 0x01, 0x4b, 0x46, 0x7f, 0xff, 0x01, 0x10, 0x67	//SCRATCHPAD

//SENSOR 5
E CHAR (ONEWIRE_ADR + SENSOR_SPACE*5) = 0x28, 0xe6, 0x68, 0xe6, 0x01, 0x00, 0x00, 0x41	//ROM
E CHAR (ONEWIRE_ADR + SENSOR_SPACE*5 + 8) = 0x50, 0x05, 0x00, 0x00, 0x00, 0xff, 0xff, 0x10, 0x1a	//SCRATCHPAD 85° no measurement yet
//E CHAR (ONEWIRE_ADR + SENSOR_SPACE*5 + 8) = 0x6f, 0x01, 0x4b, 0x46, 0x7f, 0xff, 0x01, 0x10, 0x67	//SCRATCHPAD
/************* end sensordata **************/


/************* GLOBAL VARS *****************/
DEFINE unsigned char matchedSensorsMask	//Bitmask
DEFINE unsigned char activeSensors	//number
DEFINE unsigned char tmpByte;
DEFINE unsigned char bitPos;
DEFINE int BITS_LEFT
DEFINE int WRITE_POS	//position in bits
DEFINE int READ_POS // position in bytes

DEFINE long lastStateCounter	// remember executed statements (cpu cycles)
DEFINE int ONEWIRE_STATE			// state of fsm
DEFINE int READING						//keine verwendung mehr?!

DEFINE int SEARCH_STATE;
DEFINE int RANDOM_INIT;

/************* GLOBAL CONFIG ***************/
	activeSensors = 1;
	READING=0;
	SEARCH_STATE = 0;
	RANDOM_INIT = 0;
/*********** HELPER FUNCTIONS **************/

FUNC void setSensorsMeasurements(){
	int sensor;
	int measureId;
	if(!RANDOM_INIT){
		rand(4);
		RANDOM_INIT=1;
	}
	for(sensor=0; sensor<activeSensors; sensor++){
		//check if sensor is sending a response
		if(matchedSensorsMask&(1<<sensor)){
			measureId = rand(0)%6;
			//printf("assign s%d to m%d\n", sensor, measureId);
			assignMeasurement(sensor, measureId);
		}
	}
}


FUNC int getReplyBit(int invertedMode){
	unsigned int tmpOut, tmpSensorOut, inv;
	int sensor;
	if(invertedMode){	inv=1; } else { inv=0; }
	tmpOut=1;
	for(sensor=0; sensor<activeSensors; sensor++){
		//check if sensor is sending a response
		if(matchedSensorsMask&(1<<sensor)){
			if(_RBYTE(ONEWIRE_ADR + sensor*SENSOR_SPACE +(WRITE_POS/8)) & (1<<(WRITE_POS%8))){
				tmpSensorOut = 1;
			}else{
				tmpSensorOut = 0;
			}
			//invert if inverted mode
			tmpSensorOut ^= inv;
			// Put Wired and
			tmpOut &= tmpSensorOut;
			//print Debug
			if(STEP_DEBUGGING)	printf("   %d   ", tmpSensorOut);
		} else {
			//print Debug
			if(STEP_DEBUGGING)	printf("   x   ");
		}
	}
	if(STEP_DEBUGGING)	printf(" = %d\n", tmpOut);
	//printf("Writing bit %d from Byte %02x\n",(WRITE_POS%8),_RBYTE(ONEWIRE_ADR+(WRITE_POS/8)));
  /*
	if(tmpOut){
		//if(STEP_DEBUGGING)	printf("1W: WRITE 1-BIT\n");
		if(getPIN()) PORTG |= 0x1;
	} else {
		//if(STEP_DEBUGGING)	printf("1W: WRITE 0-BIT\n");
		PORTG &= ~0x1;
	}
  */
	BITS_LEFT--;
	WRITE_POS++;
  return tmpOut;
}

SIGNAL void reply(int answerBit){
	int time;
	time = states;
	//printf("%08x reply: %d\n", time, answerBit);
  if(!answerBit){
    SENSORS_HOLD_LOW=1;
    //PORTG &= ~0x00000001;
	}
    //updateBus();
		//exec("SIGNAL STATE\n");
		//printf("%08x DBG-STOP\n",time);
    swatch(0.000055);

    SENSORS_HOLD_LOW=0;
    updateBus();
  //}
  /*
  if(GPIOG_ODR){
    PORTG |= 0x1;	//reset BUS
  }
  */
}

SIGNAL void answerPulse(int time){
  swatch(0.00006);
  //PORTG &= ~0x00000001;

    SENSORS_HOLD_LOW=1;
  swatch(0.0003);
	    SENSORS_HOLD_LOW=0;
  //if(GPIOG_ODR){
  //  PORTG |= 0x1;	//reset BUS
  //}
}

DEFINE int shiftBitPos;
shiftBitPos=0;

FUNC void resetOneWire(){
  ONEWIRE_STATE=0;
  tmpByte =0;
	shiftBitPos=0;
}


FUNC int shiftBitInByte(unsigned int inBit){
  if(inBit){
		tmpByte |= (1<<shiftBitPos);
  } else {
    tmpByte &= ~(1<<shiftBitPos);
  }
  shiftBitPos++;
  if(shiftBitPos<8){
    return -1;
  } else {
    shiftBitPos=0;
    return tmpByte;
  }
}


FUNC int oneWireFSM(int inBit){
  int sensor;
  int ret;
  ret = -1;

  switch(ONEWIRE_STATE){
    //////////////////////////////////////////
		default:
			//idle until reset
		break;
    case 0: //Read first command
      if(shiftBitInByte(inBit) != -1){
        matchedSensorsMask = (1<<(activeSensors))-1;	//first all Sensors are matched
        printf("GOT BYTE: %02x\n", tmpByte);
        shiftBitPos=0;
        if			(tmpByte == 0x33){
          ONEWIRE_STATE = 1; //read rom
          BITS_LEFT = 64;
          WRITE_POS=0;
        }
        else if	(tmpByte == 0x55){
          ONEWIRE_STATE = 2; //match rom
          shiftBitPos = 0;
          READ_POS = 0x0;
        }
        else if	(tmpByte == 0xCC){
			ONEWIRE_STATE = 3; //skip rom
		}
        else if	(tmpByte == 0xF0){
          ONEWIRE_STATE = 4; //search rom
          BITS_LEFT = 64;
          WRITE_POS=0;
          printf("SEARCH SECTION\n");
          SEARCH_STATE=0;
        }
		else {
			printf("!!!    unknown command    !!!\n!!! bus idles until reset !!!\n");
			ONEWIRE_STATE=-1; //unkown
		}
      }
      break;
    ////////////////////////////////////////////
    case 1:  //read ROM section
      if(inBit){		// ONE BIT or READ
        if(STEP_DEBUGGING)	printf("1W: READ BIT CLOCK\n");
        ret = getReplyBit(0); //normal mode
      }
      if(BITS_LEFT <=0){
        ONEWIRE_STATE = 0;
        shiftBitPos=0;
      }
      break;
    ////////////////////////////////////////////
    case 2:  //match ROM section
      if(shiftBitInByte(inBit) != -1){
        for(sensor=0; sensor<activeSensors; sensor++){
          if(tmpByte!=_RBYTE(ONEWIRE_ADR + sensor*SENSOR_SPACE + READ_POS)){
						if((matchedSensorsMask&(1<<sensor))){
	            matchedSensorsMask &= ~(1<<sensor);
	            if(STEP_DEBUGGING)	printf("1W: Sensor %d wasn't matched\n", sensor);
						}
          }
        }
        READ_POS++;
        if(READ_POS == 8){ //whole ROM was transmitted
          if(STEP_DEBUGGING)	printf("1W: matched sensors mask: %02x\n", matchedSensorsMask);
          ONEWIRE_STATE = 5;
          shiftBitPos = 0;
          tmpByte = 0;
        }
      }
      break;
    ////////////////////////////////////////////
    case 4:  //search ROM section
      switch(SEARCH_STATE){
        case 0:	//write normal bit
          if(inBit){		// ONE BIT or READ
            if(STEP_DEBUGGING)	printf("Bit %2d ", WRITE_POS);
            ret = getReplyBit(0);	//normal mode
            SEARCH_STATE=1;
          }
          break;
        case 1:	//write inverted bit
          if(inBit){		// ONE BIT or READ
            if(STEP_DEBUGGING)	printf("Invert ");
            WRITE_POS--;	//go one bit back
            BITS_LEFT++;	//we transmit the same bit so add one
            ret = getReplyBit(1);	//inverted mode
            SEARCH_STATE=2;
          }
          break;
        case 2:	//get decision bit
          //if(STEP_DEBUGGING)	printf("1W: DECISION BIT\n");
          shiftBitPos =0;
          tmpByte=inBit;
          //if(STEP_DEBUGGING)	printf("CURRENT WRITE POS: %d\n",WRITE_POS);
          for(sensor=0; sensor<activeSensors; sensor++){
            if(tmpByte!=((_RBYTE(ONEWIRE_ADR + sensor*SENSOR_SPACE + ((WRITE_POS-1)/8))>>((WRITE_POS-1)%8)) & 0x01)){
              matchedSensorsMask &= ~(1<<sensor);
              //if(STEP_DEBUGGING)	printf("1W: Sensor %d wasn't matched\n", sensor);
            }
          }
          SEARCH_STATE=0;
          break;
      }

      if(BITS_LEFT <=0 && SEARCH_STATE==2){
        ONEWIRE_STATE = 0;
        shiftBitPos=0;
      }

      break;


    ////////////////////////////////////////////
    case 3:  //skip ROM section
    ////////////////////////////////////////////
    case 5:  //get CMD for Sensor section

      if(shiftBitInByte(inBit) != -1){
        printf("GOT BYTE: %02x\n", tmpByte);
        shiftBitPos=0;
        if			(tmpByte == 0x44){ //convert CMD
		      printf("1W: start measurement...\n");
		      // CAN-DO:
		      // check if pin is push pull for min 750ms
		      // add random temperature values to SC (prob: CRC)
					setSensorsMeasurements();
		      ONEWIRE_STATE = 0;
		      shiftBitPos = 0;
        }
        else if	(tmpByte == 0xBE){ //read Scratchpad
          ONEWIRE_STATE = 11;
          BITS_LEFT = 72;	// 9Byte*8BitPerByte
          WRITE_POS = 64;	// direct behind the rom (64bit) follows the Scratchpad
        }
		else {
			printf("!!!    unknown command    !!!\n!!! bus idles until reset !!!\n");
			ONEWIRE_STATE=-1; //unkown
		}
      }

      break;


    ////////////////////////////////////////////
    case 11:  //read Scratchpad section
      if(inBit){		// ONE BIT or READ
        if(STEP_DEBUGGING)	printf("1W: READ BIT\n");
          ret = getReplyBit(0);	//normal mode
      }
      if(BITS_LEFT <=0){
        ONEWIRE_STATE = 0;
        shiftBitPos=0;
      }
      break;

  }
  return ret;
}


FUNC void oneWire(int currentIOstate){
  unsigned int tDiff;
	int ret;


  if(currentIOstate!=lastIOstate){
    //printf("%08x ONEWIRE\n",states);
    if(currentIOstate==0){
      //save time at begin of pulse
      lastStateCounter=states;
    } else {
      tDiff = (states-lastStateCounter)/MHZ_PER_ns;
			//printf("tDiff: %d\n", tDiff);
			if(tDiff>2000){
        //unknown
			}

			else if(tDiff>(480-5)){	//RESET
				if(STEP_DEBUGGING)	printf("1W: RESET\n");
				if(activeSensors>0){
					answerPulse(0);
	        resetOneWire();
				} else {
					ONEWIRE_STATE=-1; //idle
				}
			}

			else if(tDiff>(60-5)){ // ZERO-Bit
				ret = oneWireFSM(0);
				if(ret>=0){
					reply(ret);
				}
      }

			else if(tDiff>(6-1)){ // ONE-Bit
				ret = oneWireFSM(1);
				if(ret>=0){
					reply(ret);
				}
      }
    }
  }
  lastIOstate = currentIOstate;
}

DEFINE BUTTON "ENABLE  1Wire DBG", "STEP_DEBUGGING=1"
DEFINE BUTTON "DISABLE 1Wire DBG", "STEP_DEBUGGING=0"
FUNC void setSensorCount(int count){
	if(count>4){
		printf("too many sensors for simulation...\n");
	} else if(count<0){
		printf("already no sensor connected...\n");
	} else {
		activeSensors = count;
	}
	printf("Connected sensors: %d\n", activeSensors);
}
DEFINE BUTTON "Add sensor", "setSensorCount(activeSensors+1);";
DEFINE BUTTON "Remove sensor", "setSensorCount(activeSensors-1);";
