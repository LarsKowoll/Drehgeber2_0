/**
  ******************************************************************************
  * @file    	displaySIM.ini
  * @author  	Nils Schoenherr
  * @version  V1.0
  * @date     25.10.2016
  * @brief    Simulation for (Terminal-)Display of TI-Board
  ******************************************************************************
  */

// DISPLAY
DEFINE int DISPLAY_MAP
	DISPLAY_MAP = 0x90000000;
MAP DISPLAY_MAP, DISPLAY_MAP+0x2f3 READ WRITE;

DEFINE int BORDER_WIDTH		//width of Border surrounding whole Display
DEFINE int DISPLAY_WIDTH	//width of whole Display in Characters
DEFINE int DISPLAY_HEIGHT	//height of whole Display in Characters
DEFINE int WINDOW_POS_X		//x Position of TerminalWindow in Characters
DEFINE int WINDOW_POS_Y		//y Position of TerminalWindow in Characters
DEFINE int WINDOW_WIDTH		//  width of TerminalWindow in Characters
DEFINE int WINDOW_HEIGHT	//  height of TerminalWindow in Characters
DEFINE int X;							// current writing x-position in TerminalWindow
DEFINE int Y;							// current writing y-position in TerminalWindow

DEFINE int DONTSHOW; //true if escapeSequence active
DEFINE int FSMstate; //holds state of display_fsm StateMachine
DEFINE int CMDstate; //holds state of processCmd StateMachine
DEFINE int MSGlength; //Message length of packet
DEFINE int SENDstate //holds state of processSend StateMachine
DEFINE unsigned char KEYPAD_CODE	//holds current Pressed key until transmition, 0 means nothing pressed
//Variable initialization
	BORDER_WIDTH=1;
	DISPLAY_WIDTH = 40;
	DISPLAY_HEIGHT = 15;
	WINDOW_WIDTH = DISPLAY_WIDTH;
	WINDOW_HEIGHT = DISPLAY_HEIGHT;

	FSMstate = 0;
	CMDstate = 0;
	SENDstate= 0;

FUNC void initDisplay(void){
	int row, col;
	row=0;
	// top border
	for(col=0;col<(DISPLAY_WIDTH+2);col++){
		_WBYTE (DISPLAY_MAP+row*(DISPLAY_WIDTH+2)+col, '#');
	}
	row++;
	// mid with side borders
	for(; row<DISPLAY_HEIGHT+1; row++){
		col=0;
		_WBYTE (DISPLAY_MAP+row*(DISPLAY_WIDTH+2)+col++, '#');
		for(;col<(DISPLAY_WIDTH+1);col++){
			_WBYTE (DISPLAY_MAP+row*(DISPLAY_WIDTH+2)+col, ' ');
		}
		_WBYTE (DISPLAY_MAP+row*(DISPLAY_WIDTH+2)+col++, '#');
	}
	// bottom border
	for(col=0;col<(DISPLAY_WIDTH+2);col++){
		_WBYTE (DISPLAY_MAP+row*(DISPLAY_WIDTH+2)+col, '#');
	}
	X=0;
	Y=0;
}
initDisplay();


FUNC void clearDisplay(void){
	int row, col;
	row=0;
	// mid with side borders
	for(; row<WINDOW_HEIGHT; row++){
		col=0;
		for(;col<(WINDOW_WIDTH);col++){
			_WBYTE (DISPLAY_MAP + (row+BORDER_WIDTH+WINDOW_POS_Y)*(DISPLAY_WIDTH+2*BORDER_WIDTH) + BORDER_WIDTH+WINDOW_POS_X+col, ' ');
		}
	}
	X=0;
	Y=0;
}


FUNC int processSend (void){
	switch(SENDstate){
		case 0: //send header
			SPI2_IN = 0x11;	//DC1
			SENDstate=1;
			break;
		case 1: //send msg length
			if(KEYPAD_CODE>0){ //check if Key was pressed
				SPI2_IN = 4;		//len=4
				SENDstate=2;
			} else { //nothing to send
				SPI2_IN = 0;
				SENDstate = 6;
			}
			break;
		case 2: //send escape Character
			SPI2_IN = 27;		//ESC
			SENDstate=3;
			break;
		case 3: //send first byte
			SPI2_IN = 'A';			//A for touch
			SENDstate=4;
			break;
		case 4: //send Keystate
			SPI2_IN = 1;			//pressed
			SENDstate = 5;
			break;
		case 5: //send ButtonCode
			SPI2_IN = KEYPAD_CODE;	//Button code
			KEYPAD_CODE=0;
			SENDstate = 6;
			break;
		case 6: //BCC
			SPI2_IN = 0xff;			//bcc
			SENDstate=0;
			return 1;
	}
	return 0;
}

FUNC void processCmd(unsigned char input){
	switch(CMDstate){
		case 0:
			if(input=='T')	CMDstate = 1;
			break;
		case 1:
			if(input=='P')	CMDstate = 2;
			else if(input=='W') CMDstate = 4;
			else CMDstate=-1;
			break;
		// GOTO
		case 2:
			if(input<=DISPLAY_WIDTH && input>0)	X = input-1;
			CMDstate = 3;
			break;
		case 3:
			if(input<=DISPLAY_HEIGHT && input>0)	Y = input-1;
			CMDstate = -1;
			break;

		//SET WINDOW
		case 4:
			//skip font
			X=0;
			Y=0;
			CMDstate =5;
			break;
		case 5:
			if(input<=DISPLAY_WIDTH && input>0)	WINDOW_POS_X = input-1;
			CMDstate=6;
			break;
		case 6:
			if(input<=DISPLAY_HEIGHT && input>0)	WINDOW_POS_Y = input-1;
			CMDstate=7;
			break;
		case 7:
			if(input<=(DISPLAY_WIDTH-WINDOW_POS_X) && input>0)	WINDOW_WIDTH = input;
			else WINDOW_WIDTH = (DISPLAY_WIDTH-WINDOW_POS_X);
			CMDstate=8;
			break;
		case 8:
			if(input<=(DISPLAY_HEIGHT-WINDOW_POS_Y) && input>0)	WINDOW_HEIGHT = input;
			else WINDOW_HEIGHT = (DISPLAY_HEIGHT-WINDOW_POS_Y);
			clearDisplay();
			CMDstate=-1;
			break;

	}
}
FUNC int windowPos(int inX, int inY){
	return DISPLAY_MAP + (inY+BORDER_WIDTH+WINDOW_POS_Y)*(DISPLAY_WIDTH+2*BORDER_WIDTH) + (inX+BORDER_WIDTH+WINDOW_POS_X);
}
FUNC void putc(unsigned char input){
	switch(input){
		case 12:
			//printf("TFT_cls\n");
			clearDisplay();
			break;
		case 10:
			//printf("LINE FEED\n");
			Y++;
			break;
		case 13:
			//printf("CARRIAGE RETURN\n");
			X=0;
			break;
		default:
			_WBYTE(DISPLAY_MAP + (Y+BORDER_WIDTH+WINDOW_POS_Y)*(DISPLAY_WIDTH+2) + (X+BORDER_WIDTH+WINDOW_POS_X), input);
			X++;
	}
	if(X>=WINDOW_WIDTH){
		X=0;
		Y++;
	}
	if(Y>=WINDOW_HEIGHT){
		//SCROLL
		int row;
		for(row=0; row<WINDOW_HEIGHT-1; row++){
			int col;
			for(col=0;col<(WINDOW_WIDTH);col++){
				_WBYTE (windowPos(col,row), _RBYTE (windowPos(col,row+1)));
			}
		}
		memset(windowPos(0,row), WINDOW_WIDTH, ' ');
		Y=WINDOW_HEIGHT-1;
	}
}
FUNC void display_fsm(unsigned char input){
	switch(FSMstate){
		case 0: //getting first byte
			DONTSHOW = 0;
			//printf("%02x init\n", input);
			if			(input == 0x11)	FSMstate = 1;	 //DATA
			else if	(input == 0x12)	FSMstate = 11; //REQUEST
		break;

		case 1:	//DATA: getting message length
			MSGlength = input;
			FSMstate=2;
			break;

		case 11: //REQUEST databyte0
			if(input == 1) FSMstate=12;
			break;

		case 12: //REQUEST databyte1
			if(input == 'S') FSMstate=13;
			break;

		case 13: //REQUEST crc
			//dont care
			FSMstate=14;
			break;

		case 14: //REQUEST ack
			//answer ACK
			FSMstate=15;
			SENDstate =0;
			//going into send mode
			break;

		case 15:
			//reply
			if(processSend()){
				FSMstate=0;
			}
			break;

		case 2: //DATA
			if(MSGlength==1){ //if last Byte of MSG
				//continue with end sequence
				FSMstate=3;
			}

			if(input==27){ //ESCAPE CHARACTER
				DONTSHOW = 1;
				CMDstate = 0;
				FSMstate = 21;
			}
			if(!DONTSHOW) putc(input);

			MSGlength--;
			break;

		case 21: //DATA escaped sequence
			if(MSGlength==1){ //if last Byte of MSG
				//continue with end sequence
				FSMstate=3;
			}

			processCmd(input);
			MSGlength--;
			break;

		case 3: //DATA crc
			//dont care
			FSMstate =4;
			break;

		case 4: //DATA ack
			//answer ACK
			FSMstate =0;
			//reset StateMachine
			break;
	}
}

SIGNAL void display_watcher(void){
	while(1){
		wwatch(SPI2_OUT);
		SPI2_IN = 6; // default respond with ACK
		display_fsm(SPI2_OUT);
	}
}
display_watcher();
